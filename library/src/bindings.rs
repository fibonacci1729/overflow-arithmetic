// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod arithmetic {
        pub mod overflow {
            #[allow(clippy::all)]
            pub mod overflowing_add {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// Represents the arguments to overflowing-add.
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Arguments {
                    pub x: i32,
                    pub y: i32,
                }
                impl ::core::fmt::Debug for Arguments {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Arguments")
                            .field("x", &self.x)
                            .field("y", &self.y)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_overflowing_add_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                ) -> *mut u8 {
                    let result0 = T::overflowing_add(Arguments { x: arg0, y: arg1 });
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let (t2_0, t2_1) = result0;
                    *ptr1.add(0).cast::<i32>() = _rt::as_i32(t2_0);
                    *ptr1.add(4).cast::<u8>() = (match t2_1 {
                        true => 1,
                        false => 0,
                    }) as u8;
                    ptr1
                }
                pub trait Guest {
                    /// Returns a tuple including the result of addition and a boolean indicating whether overflow
                    /// artithmetic overflow would have occurred. If overflow would have occurred then the wrapped
                    /// value is returned.
                    fn overflowing_add(args: Arguments) -> (i32, bool);
                }
                #[doc(hidden)]

                macro_rules! __export_arithmetic_overflow_overflowing_add_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "arithmetic:overflow/overflowing-add#overflowing-add"]
          unsafe extern "C" fn export_overflowing_add(arg0: i32,arg1: i32,) -> *mut u8 {
            $($path_to_types)*::_export_overflowing_add_cabi::<$ty>(arg0, arg1)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_arithmetic_overflow_overflowing_add_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
    }
}
mod _rt {

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_library_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::arithmetic::overflow::overflowing_add::__export_arithmetic_overflow_overflowing_add_cabi!($ty with_types_in $($path_to_types_root)*::exports::arithmetic::overflow::overflowing_add);
  )
}
#[doc(inline)]
pub(crate) use __export_library_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:library:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 267] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8d\x01\x01A\x02\x01\
A\x02\x01B\x05\x01r\x02\x01xz\x01yz\x04\0\x09arguments\x03\0\0\x01o\x02z\x7f\x01\
@\x01\x04args\x01\0\x02\x04\0\x0foverflowing-add\x01\x03\x04\x01#arithmetic:over\
flow/overflowing-add\x05\0\x04\x01\x1barithmetic:overflow/library\x04\0\x0b\x0d\x01\
\0\x07library\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
