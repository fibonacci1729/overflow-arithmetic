// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
//   * additional derives ["serde::Serialize", "serde::Deserialize"]
pub mod arithmetic {
    pub mod overflow {
        #[allow(clippy::all)]
        pub mod overflowing_add {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Represents the arguments to overflowing-add.
            #[repr(C)]
            #[derive(Clone, Copy, serde::Deserialize, serde::Serialize)]
            pub struct Arguments {
                pub x: i32,
                pub y: i32,
            }
            impl ::core::fmt::Debug for Arguments {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Arguments")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns a tuple including the result of addition and a boolean indicating whether overflow
            /// artithmetic overflow would have occurred. If overflow would have occurred then the wrapped
            /// value is returned.
            pub fn overflowing_add(args: Arguments) -> (i32, bool) {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let Arguments { x: x0, y: y0 } = args;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "arithmetic:overflow/overflowing-add")]
                    extern "C" {
                        #[link_name = "overflowing-add"]
                        fn wit_import(_: i32, _: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i32(x0), _rt::as_i32(y0), ptr1);
                    let l2 = *ptr1.add(0).cast::<i32>();
                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                    (l2, _rt::bool_lift(l3 as u8))
                }
            }
        }
    }
}
mod _rt {

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            ::core::mem::transmute::<u8, bool>(val)
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:imports:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 267] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8d\x01\x01A\x02\x01\
A\x02\x01B\x05\x01r\x02\x01xz\x01yz\x04\0\x09arguments\x03\0\0\x01o\x02z\x7f\x01\
@\x01\x04args\x01\0\x02\x04\0\x0foverflowing-add\x01\x03\x03\x01#arithmetic:over\
flow/overflowing-add\x05\0\x04\x01\x1barithmetic:overflow/imports\x04\0\x0b\x0d\x01\
\0\x07imports\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
